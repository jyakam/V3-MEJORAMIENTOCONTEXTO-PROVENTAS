// src/funciones/helpers/taskQueue.mjs
// Este es el nuevo "Gestor de la Fila". Su √∫nica responsabilidad es
// asegurar que las tareas de base de datos se ejecuten una por una, evitando colisiones.

const queue = []; // La fila de espera donde vivir√°n las tareas.
let isProcessing = false; // Una bandera para saber si el "recepcionista" est√° ocupado.

/**
 * Procesa la siguiente tarea en la fila, si la hay.
 * Esta funci√≥n es el coraz√≥n del sistema de turnos.
 */
async function processQueue() {
    // Si ya hay una tarea en ejecuci√≥n o si la fila est√° vac√≠a, no hacemos nada.
    if (isProcessing || queue.length === 0) {
        return;
    }

    isProcessing = true; // Levantamos la bandera: "estoy ocupado".

    // Sacamos la primera tarea de la fila, que incluye la tarea y sus manejadores de promesa.
    const { task, resolve, reject } = queue.shift();

    try {
        console.log(`üîµ [QUEUE] Iniciando nueva tarea. Tareas pendientes: ${queue.length}`);
        // Ejecutamos la tarea (ej: la llamada a postTable) y esperamos el resultado.
        const result = await task();
        console.log(`üü¢ [QUEUE] Tarea completada con √©xito.`);
        // Devolvemos el resultado exitoso a quien originalmente llam√≥ la tarea.
        resolve(result);
    } catch (error) {
        // Si la tarea falla, lo registramos y le informamos del error a quien la llam√≥.
        console.error('üî¥ [QUEUE] La tarea en la fila fall√≥:', error);
        reject(error);
    } finally {
        // Haya √©xito o error, la tarea ha terminado.
        isProcessing = false; // Bajamos la bandera: "estoy libre".
        console.log(`‚ö™ [QUEUE] Procesador libre. Verificando si hay m√°s tareas en la fila...`);
        // Volvemos a llamar a la funci√≥n para ver si hay m√°s tareas esperando su turno.
        processQueue();
    }
}

/**
 * A√±ade una nueva tarea a la fila de procesamiento.
 * Esta es la √∫nica funci√≥n que el resto de la aplicaci√≥n usar√° para interactuar con la fila.
 * Devuelve una promesa que permite que el c√≥digo que la llama pueda esperar (await) a que su tarea se complete.
 * @param {Function} task - La funci√≥n as√≠ncrona que se debe ejecutar (ej. la llamada a postTable).
 * @returns {Promise<any>}
 */
export function addTask(task) {
    return new Promise((resolve, reject) => {
        try {
            const now = new Date().toISOString();
            console.log(`üì• [QUEUE] Nueva tarea a√±adida a la fila. Total en fila ahora: ${queue.length + 1} @ ${now}`);
        } catch (e) {
            console.log('[DEBUG QUEUE] Error log addTask:', e?.message);
        }

        // A√±adimos la tarea y sus manejadores de promesa a la fila (MISMA L√ìGICA)
        queue.push({ task, resolve, reject });

        // Intentamos iniciar el procesamiento. Si ya est√° ocupado, la tarea simplemente esperar√° su turno (MISMA L√ìGICA)
        processQueue();
    });
}

